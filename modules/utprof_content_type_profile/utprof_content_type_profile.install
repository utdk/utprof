<?php

/**
 * @file
 * Profile content type installation file.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\pathauto\Entity\PathautoPattern;
use Drupal\utprof\Permissions;

/**
 * Implements hook_install().
 */
function utprof_content_type_profile_install() {
  // Add default Pathauto setting for content type.
  _utprof_add_pathauto_pattern();

  // Add standard permissions to "utexas_site_manager" & "utexas_content_editor"
  // if those roles exist.
  Permissions::assignPermissions('editor', 'utexas_content_editor');
  Permissions::assignPermissions('manager', 'utexas_site_manager');
}

/**
 * Implements hook_requirements().
 */
function utprof_content_type_profile_requirements($phase) {
  $requirements = [];
  if ($phase === 'install') {
    $active_profile = \Drupal::installProfile();
    $profile_information = \Drupal::service('extension.list.profile')->getExtensionInfo($active_profile);
    $has_alpha = strpos($profile_information['version'], '3.0.0-alpha');
    $early_beta = in_array($profile_information['version'], [
      '3.0.0-beta.1',
      '3.0.0-beta.2',
      '3.0.0-beta.3',
      '3.0.0-beta.4',
    ]);
    if ($early_beta or $has_alpha !== FALSE) {
      $requirements['install_profile']['severity'] = REQUIREMENT_ERROR;
      $requirements['install_profile']['description'] = t('The UT Drupal Kit Profile add-on could not be installed because it requires the UT Drupal Kit version 3.0.0-beta.5 or higher.');
    }
  }
  return $requirements;
}

/**
 * Check if a pathauto pattern has a condition for `utprof_profile`.
 */
function _utprof_no_existing_pathauto_pattern() {
  $no_profile_pathauto_defined = TRUE;
  // Load all pattern configuration entities.
  foreach (\Drupal::configFactory()->listAll('pathauto.pattern.') as $pattern_config_name) {
    $pattern_config = \Drupal::configFactory()->getEditable($pattern_config_name);
    if ($pattern_config->get('type') == 'canonical_entities:node') {
      $selection_criteria = $pattern_config->get('selection_criteria');
      foreach ($selection_criteria as $uuid => $condition) {
        if ($condition['id'] == 'node_type') {
          $bundles = array_keys($selection_criteria[$uuid]['bundles']);
          if (in_array('utprof_profile', $bundles)) {
            $no_profile_pathauto_defined = FALSE;
          }
          break;
        }
      }
    }
  }
  return $no_profile_pathauto_defined;
}

/**
 * Save a pathauto pattern configuration entity.
 */
function _utprof_add_pathauto_pattern() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('pathauto')) {
    if (_utprof_no_existing_pathauto_pattern()) {
      $pattern = PathautoPattern::create([
        'id' => 'utprof_profile',
        'label' => 'Pathauto : Profile content type',
        'type' => 'canonical_entities:node',
        'pattern' => '/profiles/[node:title]',
        'weight' => _setPatternWeightBeforeGeneric(),
      ]);
      $pattern->addSelectionCondition(
        [
          'id' => 'node_type',
          'bundles' => [
            'utprof_profile' => 'utprof_profile',
          ],
          'negate' => FALSE,
          'context_mapping' => [
            'node' => 'node',
          ],
        ]
      );
      $pattern->save();
    }
  }
}

/**
 * Provide weight that takes presedence over generic pattern.
 * @return string The weight of the custom pathauto pattern.
 */
function _setPatternWeightBeforeGeneric() {
  // Default to -10 in case there is a generic pattern.
  $weight = -10;
  // If generic pattern present, place it 1 level above.
  if ($generic = PathautoPattern::load('pathauto_node')) {
    $weight = (int) $generic->get('weight') -1;
  }
  return (string) $weight;
}

/**
 * Enable the field_group module & update form config.
 */
function utprof_content_type_profile_update_8101() {
  // Clear the cache so that the utexas_link_widget will be registered.
  drupal_flush_all_caches();

  // Ensure optional view modes provided by the UTexas profile are installed.
  $required_view_modes = [
    'core.entity_view_mode.node.utexas_name_only',
    'core.entity_view_mode.node.utexas_prominent',
    'core.entity_view_mode.node.utexas_basic',
  ];
  foreach ($required_view_modes as $view_mode) {
    $existing_config = \Drupal::config($view_mode)->get('id');
    if (is_null($existing_config)) {
      $config_path = drupal_get_path('profile', 'utexas') . '/config/optional';
      $config_source = new FileStorage($config_path);
      \Drupal::service('config.installer')->installOptionalConfig($config_source);
      break;
    }
  }

  \Drupal::service('module_installer')->install(['field_group']);
  \Drupal::service('features.manager')->import([
    'utprof_content_type_profile',
  ], TRUE);
}

/**
 * Add pathauto setting for Profile content type.
 */
function utprof_content_type_profile_update_8102() {
  _utprof_add_pathauto_pattern();
}

/**
 * Change label to 'Internal Profile tags' & change widget.
 */
function utprof_content_type_profile_update_8103() {
  \Drupal::service('features.manager')->import([
    'utprof_content_type_profile',
  ], TRUE);
}

/**
 * Revert Profile content type feature to standardize fields.
 */
function utprof_content_type_profile_update_8104() {
  \Drupal::service('features.manager')->import([
    'utprof_content_type_profile',
  ], TRUE);
}

/**
 * Allow link options in Contact form and Website links.
 */
function utprof_content_type_profile_update_8105() {
  \Drupal::service('features.manager')->import([
    'utprof_content_type_profile',
  ], TRUE);
}

/**
 * Update field label & description of UT EID.
 * Update description on Profile Groups field (#124).
 */
function utprof_content_type_profile_update_8106() {
  \Drupal::service('features.manager')->import([
    'utprof_content_type_profile',
  ], TRUE);
}

/**
 * Add teaser view display configuration.
 */
function utprof_content_type_profile_update_8107() {
  \Drupal::service('features.manager')->import([
    'utprof_content_type_profile',
  ], TRUE);
}

/**
 * Have profiles pattern above fallback content pattern.
 */
function utprof_content_type_profile_update_8108() {
  $pattern = PathautoPattern::load('utprof_profile');
  $pattern->set('weight', _setPatternWeightBeforeGeneric())->save();
}

/**
 * Make metatag values overrideable on a per-node basis #134
 */
function utprof_content_type_profile_update_8109() {
  \Drupal::service('features.manager')->import([
    'utprof_content_type_profile',
  ], TRUE);
}
