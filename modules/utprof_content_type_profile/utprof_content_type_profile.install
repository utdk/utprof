<?php

/**
 * @file
 * Profile content type installation file.
 */

use Drupal\pathauto\Entity\PathautoPattern;

/**
 * Implements hook_install().
 */
function utprof_content_type_profile_install() {
  // Add default Pathauto setting for content type.
  _utprof_add_pathauto_pattern();

  /** @var \Drupal\node\NodeInterface $default_profile_nodes */
  $default_profile_nodes = [];
  // The $default_profile_nodes content is defined in an array in
  // utprof_content_type_profile.default_content.inc.
  require_once 'utprof_content_type_profile.default_content.inc';
  foreach ($default_profile_nodes as $data) {
    _utprof_content_type_profile_create_node($data);
  }
}

/**
 * Implements hook_requirements().
 */
function utprof_content_type_profile_requirements($phase) {
  $requirements = [];
  if ($phase === 'install') {
    $active_profile = \Drupal::installProfile();
    $profile_information = system_get_info('module', $active_profile);
    $has_alpha = strpos($profile_information['version'], '3.0.0-alpha');
    $early_beta = in_array($profile_information['version'], [
      '3.0.0-beta.1',
      '3.0.0-beta.2',
      '3.0.0-beta.3',
    ]);
    if ($early_beta or $has_alpha !== FALSE) {
      $requirements['install_profile']['severity'] = REQUIREMENT_ERROR;
      $requirements['install_profile']['description'] = t('The UT Drupal Kit Profile add-on could not be installed because it requires the UT Drupal Kit version 3.0.0-beta.4 or higher.');
    }
  }
  return $requirements;
}

/**
 * Check if a pathauto pattern has a condition for `utprof_profile`.
 */
function _utprof_no_existing_pathauto_pattern() {
  $no_profile_pathauto_defined = TRUE;
  // Load all pattern configuration entities.
  foreach (\Drupal::configFactory()->listAll('pathauto.pattern.') as $pattern_config_name) {
    $pattern_config = \Drupal::configFactory()->getEditable($pattern_config_name);
    if ($pattern_config->get('type') == 'canonical_entities:node') {
      $selection_criteria = $pattern_config->get('selection_criteria');
      foreach ($selection_criteria as $uuid => $condition) {
        if ($condition['id'] == 'node_type') {
          $bundles = array_keys($selection_criteria[$uuid]['bundles']);
          if (in_array('utprof_profile', $bundles)) {
            $no_profile_pathauto_defined = FALSE;
          }
          break;
        }
      }
    }
  }
  return $no_profile_pathauto_defined;
}

/**
 * Save a pathauto pattern configuration entity.
 */
function _utprof_add_pathauto_pattern() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('pathauto')) {
    if (_utprof_no_existing_pathauto_pattern()) {
      $pattern = PathautoPattern::create([
        'id' => 'utprof_profile',
        'label' => 'Pathauto : Profile content type',
        'type' => 'canonical_entities:node',
        'pattern' => '/profiles/[node:title]',
      ]);
      $pattern->addSelectionCondition(
        [
          'id' => 'node_type',
          'bundles' => [
            'utprof_profile' => 'utprof_profile',
          ],
          'negate' => FALSE,
          'context_mapping' => [
            'node' => 'node',
          ],
        ]
      );
      $pattern->save();
    }
  }
}

/**
 * Enable the field_group module & update form config.
 */
function utprof_content_type_profile_update_8101() {
  \Drupal::service('module_installer')->install(['field_group']);
  \Drupal::service('features.manager')->import([
    'utprof_content_type_profile',
  ], TRUE);
}

/**
 * Add pathauto setting for Profile content type.
 */
function utprof_content_type_profile_update_8102() {
  _utprof_add_pathauto_pattern();
}

/**
 * Revert Profile content type feature to standardize fields.
 */
function utprof_content_type_profile_update_8103()
{
  \Drupal::service('features.manager')->import([
    'utprof_content_type_profile',
  ], TRUE);
}
